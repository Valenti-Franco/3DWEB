/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 trophyCup.gltf
*/

import React, { useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { useFrame } from 'react-three-fiber';
import * as THREE from 'three';

// Carga la textura de mapeo de entorno (environment map)
const cubeTextureLoader = new THREE.CubeTextureLoader();
const envMapTexture = cubeTextureLoader.load([
  'path/to/px.jpg', // Ruta a la textura para el lado derecho
  'path/to/nx.jpg', // Ruta a la textura para el lado izquierdo
  'path/to/py.jpg', // Ruta a la textura para el lado superior
  'path/to/ny.jpg', // Ruta a la textura para el lado inferior
  'path/to/pz.jpg', // Ruta a la textura para el lado frontal
  'path/to/nz.jpg', // Ruta a la textura para el lado posterior
]);
const material = new THREE.MeshPhysicalMaterial({
  color: 0xffd700,                // Color base del material (dorado)
  roughness: 0.1,                 // Rugosidad del material (valores bajos para una superficie más lisa)
  metalness: 1.0,                 // Metalicidad del material (1 para mayor brillo metálico)
  envMap: envMapTexture,          // Textura de mapeo de entorno
  envMapIntensity: 1,             // Intensidad del mapeo de entorno (ajusta según el brillo deseado)
  emissive: 0xffd700,             // Emisividad del material (mismo color dorado para brillo adicional)
  emissiveIntensity: 1,           // Intensidad de la emisividad (valores más altos para un brillo más fuerte)
});
export function Trophy(props) {
  const lightsRef = useRef([]);
  const groupRef = useRef();
const { section, menuOpened } = props;
// Animación para las luces que roden circularmente
useFrame((state, delta) => {
  const time = state.clock.getElapsedTime();
  lightsRef.current.forEach((light, index) => {
    const angle = (time + index * 432) * 0.5;
    const radius = 380;
    light.position.x = Math.cos(angle) * radius;
    light.position.z = Math.sin(angle) * radius;
  });
});
  const { nodes, materials } = useGLTF('models/trophyCup.gltf')

 
  return (
    <>
      {/* Grupo para los elementos que deseas iluminar */}
      <group {...props} dispose={null}>
      <mesh
        geometry={nodes.wctrophy_body_low_body_0.geometry}
        material={materials.body}
        rotation={[-Math.PI / 2, 0, 0]}
        scale={1}
      />
      <mesh
        geometry={nodes.wctrophy_globe_low_globe_0.geometry}
        material={materials.globe}
        rotation={[-Math.PI / 2, 0, 0]}
        scale={1}
      />
    </group>

      {/* Luces solo para el grupo */}
      <pointLight color="fdf50c5a" intensity={.08} position={[40, 0, 0]} />
      <pointLight color="fdf50c5a" intensity={.08} position={[30, 30, 30]} />
      <pointLight color="fdf50c5a" intensity={.08} position={[20, 20, 20]} /> 
      {/* Agrega más luces si lo deseas

      {/* El resto de tu código para el componente */}
    </>
  )
}

useGLTF.preload('models/trophyCup.gltf')
